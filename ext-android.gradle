if (plugins.hasPlugin('com.android.application') || plugins.hasPlugin('com.android.library')) {
    android {
        compileSdkVersion rootProject.ext.compileSdkVersion
        buildToolsVersion rootProject.ext.buildToolsVersion

        compileOptions {
            sourceCompatibility JavaVersion.VERSION_1_7
            targetCompatibility JavaVersion.VERSION_1_7
        }

        defaultConfig {
            minSdkVersion rootProject.ext.minSdkVersion
            targetSdkVersion rootProject.ext.targetSdkVersion
//            versionCode Integer.parseInt(project.versionCode)
//            versionName computeVersion()
            archivesBaseName += ("-" + project.versionName + "." + project.versionCode + "." + buildTime())
        }
    }

    android {

        testOptions {
            unitTests.returnDefaultValues = true
        }

        aaptOptions {
//            noCompress 'foo', 'bar'
            ignoreAssetsPattern "!.svn:!.git:!.ds_store:!*.scc:.*:<dir>_*:!CVS:!thumbs.db:!picasa.ini:!*~"
        }

//        packagingOptions {
////        pickFirst 'META-INF/foo.txt'
//
//            exclude 'META-INF/DEPENDENCIES.txt'
//            exclude 'META-INF/LICENSE.txt'
//            exclude 'META-INF/NOTICE.txt'
//            exclude 'LICENSE.txt'
//            exclude 'META-INF/LICENSE'
//            exclude 'META-INF/license.txt'
//            exclude 'META-INF/NOTICE'
//            exclude 'META-INF/notice.txt'
//            exclude 'META-INF/ASL2.0'
//            exclude 'META-INF/RELEASE_NOTES.txt'
//        }

        packagingOptions.excludes = [
                '**/LICENSE.txt',
                '**/license.txt',
                '**/DEPENDENCIES.txt',
                '**/NOTICE.txt',
                '**/NOTICE',
                '**/notice.txt',
                '**/ASL2.0',
                '**/RELEASE_NOTES.txt',

                'LICENSE',
                'LICENSE.txt',
                'META-INF/LICENSE',
                'META-INF/LICENSE.txt',
                'META-INF/NOTICE',
                'META-INF/NOTICE.txt',
                '.readme'
        ]

//        lintOptions {
//            abortOnError false
//            quiet false
//            showAll true
//            xmlReport true
//            htmlReport true
//            lintConfig file("${project.rootDir}/config/lint/lint.xml")
//
//            xmlOutput file("lint/lint-report.xml")
//            htmlOutput file("lint/lint-report.html")
//        }

        dexOptions {
            preDexLibraries = false
            incremental true
            javaMaxHeapSize "2g"
        }
    }
}

public static def buildTime() {
    def date = new Date()
    def formattedDate = date.format('MMddHH')
    return formattedDate
}