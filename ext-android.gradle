def computeVersionName() {
    return project.versionName + "." + project.versionCode + "." + buildTime()
}

def buildTime() {
    def date = new Date()
    def formattedDate = date.format('MMddHH')
    return formattedDate
}

if (plugins.hasPlugin('com.android.application') || plugins.hasPlugin('com.android.library')) {
    android {
        compileSdkVersion Integer.parseInt(project.compileSdkVersion)
        buildToolsVersion project.buildToolsVersion

        compileOptions {
            sourceCompatibility JavaVersion.VERSION_1_7
            targetCompatibility JavaVersion.VERSION_1_7
        }

        defaultConfig {
            minSdkVersion Integer.parseInt(project.minSdkVersion)
            targetSdkVersion Integer.parseInt(project.targetSdkVersion)
            versionCode Integer.parseInt(project.versionCode)
            versionName computeVersionName()
        }
    }

    android {
        aaptOptions {
//            noCompress 'foo', 'bar'
            ignoreAssetsPattern "!.svn:!.git:!.ds_store:!*.scc:.*:<dir>_*:!CVS:!thumbs.db:!picasa.ini:!*~"
        }

//        packagingOptions {
////        pickFirst 'META-INF/foo.txt'
//
//            exclude 'META-INF/DEPENDENCIES.txt'
//            exclude 'META-INF/LICENSE.txt'
//            exclude 'META-INF/NOTICE.txt'
//            exclude 'LICENSE.txt'
//            exclude 'META-INF/LICENSE'
//            exclude 'META-INF/license.txt'
//            exclude 'META-INF/NOTICE'
//            exclude 'META-INF/notice.txt'
//            exclude 'META-INF/ASL2.0'
//            exclude 'META-INF/RELEASE_NOTES.txt'
//        }

        packagingOptions.excludes = [
                '**/LICENSE.txt',
                '**/license.txt',
                '**/DEPENDENCIES.txt',
                '**/NOTICE.txt',
                '**/NOTICE',
                '**/notice.txt',
                '**/ASL2.0',
                '**/RELEASE_NOTES.txt',

                'LICENSE',
                'LICENSE.txt',
                'META-INF/LICENSE',
                'META-INF/LICENSE.txt',
                'META-INF/NOTICE',
                'META-INF/NOTICE.txt',
        ]

        lintOptions {
            abortOnError false
            quiet false
            showAll true
        }

        dexOptions {
            preDexLibraries = false
            incremental true
            javaMaxHeapSize "2g"
        }
    }
}

def getKeyStore(def propertyFile) {
    if (propertyFile == null) {
        return 'debug'
    }

    def props = new Properties();
    try {
        def signingConfig = 'release';

        def ins = new BufferedInputStream(new FileInputStream(propertyFile));
        props.load(ins);
        ins.close();
        project.android.signingConfigs {
            "$signingConfig" {
                storeFile = new File(props.getProperty('storeFile'));
                storePassword = props.getProperty('storePassword');
                keyAlias = props.getProperty('keyAlias');
                keyPassword = props.getProperty('keyPassword');
            }
        }
        return "$signingConfig";
    } catch (Exception e) {
        return 'debug';
    }
}