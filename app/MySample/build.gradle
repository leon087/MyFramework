apply plugin: 'com.android.application'
apply from: "$rootDir/ext-android.gradle"
apply from: "$rootDir/findbugs/findbugs.gradle"

def getKeyStore(def propertyFile) {
    if (propertyFile == null) {
        return 'debug'
    }

    def props = new Properties();
    try {
        def signingConfig = 'release';

        def ins = new BufferedInputStream(new FileInputStream(propertyFile));
        props.load(ins);
        ins.close();
        project.android.signingConfigs {
            "$signingConfig" {
                storeFile = new File(props.getProperty('storeFile'));
                storePassword = props.getProperty('storePassword');
                keyAlias = props.getProperty('keyAlias');
                keyPassword = props.getProperty('keyPassword');
            }
        }
        return "$signingConfig";
    } catch (Exception e) {
        return 'debug';
    }
}

android {
    applicationVariants.all { variant ->
        variant.assemble.doLast {
            variant.outputs.each { output ->
                File unaligned = output.packageApplication.outputFile;
                File aligned = output.outputFile
                if (!unaligned.getName().equalsIgnoreCase(aligned.getName())) {
                    println "deleting " + unaligned.getName()
                    unaligned.delete()
                }
            }
        }
    }

    splits {
        abi {
            enable true
            reset()
            include('armeabi')
            universalApk false//是否打包通用版本(包含所有abi)
        }
    }

    defaultConfig {
        applicationId = project.applicationId
        multiDexEnabled true
        buildConfigField("String", "ROOT_API", '""')

        testInstrumentationRunner "com.android.test.runner.MultiDexTestRunner"
    }

    signingConfigs {
        debug {
            storeFile file(project.storeFile)
            storePassword project.storePassword
            keyAlias project.keyAlias
            keyPassword project.keyPassword
        }
    }

    android.buildTypes {
        release {
            shrinkResources true
            zipAlignEnabled true

            signingConfig signingConfigs.(getKeyStore(project.jks_properties))

            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'),
                    new File(project(':lib:MyUtil').getProjectDir(), 'util-proguard-rules.pro'),
                    new File(project(':lib:MyCommon').getProjectDir(), 'common-proguard-rules.pro'),
                    new File('proguard-rules.pro')
        }

        debug {
            initWith(buildTypes.release)
            debuggable true
            minifyEnabled false

            versionNameSuffix "-debug"
            signingConfig signingConfigs.debug
        }

        rtest {
            initWith(buildTypes.release)
            debuggable true

            versionNameSuffix "-rtest"
            signingConfig signingConfigs.debug
        }
    }

    flavorDimensions "type_server", "type_xx"
    productFlavors {
        //type_server：平台配置
        dev {
            dimension "type_server"
            buildConfigField("String", "ROOT_API", root_api_dev)
        }

        devtest {
            dimension "type_server"
            buildConfigField("String", "ROOT_API", root_api_devtest)
        }

        demo {
            dimension "type_server"
            buildConfigField("String", "ROOT_API", root_api_demo)
        }

        //type_xx：配置
        lite {
            dimension "type_xx"
        }

        full {
            dimension "type_xx"
        }
    }
}

dependencies {
    //android.jar
    //compile files("${android.sdk}/platforms/${android.target}/android.jar")
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile project(':lib:MyCommon')
    compile project(':lib:MyFramework')

    //http
    compile 'com.squareup.retrofit2:retrofit:2.0.0-beta4'
    compile 'com.squareup.okhttp3:okhttp:3.1.2'
    compile 'com.squareup.okhttp3:logging-interceptor:3.1.2'

    //rx
    compile 'io.reactivex:rxandroid:1.1.0'
    compile 'io.reactivex:rxjava:1.1.0'

    compile 'com.android.support:multidex:1.0.1'

    androidTestCompile 'com.jayway.android.robotium:robotium-solo:5.4.1'
    androidTestCompile('com.android.support:multidex-instrumentation:1.0.1') {
        exclude group: 'com.android.support', module: 'multidex'
    }

    rtestCompile 'com.squareup.leakcanary:leakcanary-android:1.3.1'
    debugCompile 'com.squareup.leakcanary:leakcanary-android:1.3.1'
    releaseCompile 'com.squareup.leakcanary:leakcanary-android-no-op:1.3.1'

    compile 'com.squareup:otto:1.3.8'
}