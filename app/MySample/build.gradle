apply plugin: 'com.android.application'
apply from: "$rootDir/ext-android.gradle"

def getKeyStore(def propertyFile, def storeFile) {
    if (propertyFile == null || storeFile == "") {
        return 'debug'
    }

    def props = new Properties();
    try {
        def signingConfig = 'release';

        def ins = new BufferedInputStream(new FileInputStream(propertyFile));
        props.load(ins);
        ins.close();
        project.android.signingConfigs {
            "$signingConfig" {
                storeFile = new File(storeFile);
                storePassword = props.getProperty('storePassword');
                keyAlias = props.getProperty('keyAlias');
                keyPassword = props.getProperty('keyPassword');
//                System.out.println(props.getProperty('storeFile') + '   ');
            }
        }
        return "$signingConfig";
    } catch (Exception e) {
        return 'debug';
    }
}

android {
    defaultConfig {
        applicationId = project.applicationId
        multiDexEnabled true

        testInstrumentationRunner "com.android.test.runner.MultiDexTestRunner"
    }

    signingConfigs {
        debug {
            storeFile file(project.storeFile)
            storePassword project.storePassword
            keyAlias project.keyAlias
            keyPassword project.keyPassword
        }
    }

    android.buildTypes {
        release {
            shrinkResources true
            zipAlignEnabled true

            signingConfig signingConfigs.(
                    getKeyStore(project.propertyFile_release, project.storeFile_release))

            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'),
                    new File(project(':lib:MyUtil').getProjectDir(), 'util-proguard-rules.pro'),
                    new File(project(':lib:MyCommon').getProjectDir(), 'common-proguard-rules.pro'),
                    new File('proguard-rules.pro')
        }

        debug {
            shrinkResources true
            zipAlignEnabled true

            versionNameSuffix "-debug"
            signingConfig signingConfigs.debug
        }

        beta {
            initWith(buildTypes.release)
            debuggable true

            versionNameSuffix "-beta"
            signingConfig signingConfigs.debug
        }
    }
}

dependencies {
    //android.jar
    //compile files("${android.sdk}/platforms/${android.target}/android.jar")
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile project(':lib:MyCommon')
    compile project(':lib:MyFramework')

    compile 'com.android.support:multidex:1.0.1'
    androidTestCompile 'com.jayway.android.robotium:robotium-solo:5.4.1'
    androidTestCompile('com.android.support:multidex-instrumentation:1.0.1') {
        exclude group: 'com.android.support', module: 'multidex'
    }

    betaCompile 'com.squareup.leakcanary:leakcanary-android:1.3.1'
    debugCompile 'com.squareup.leakcanary:leakcanary-android:1.3.1'
    releaseCompile 'com.squareup.leakcanary:leakcanary-android-no-op:1.3.1'
}