import cm.android.gradle.util.Util

apply plugin: 'com.android.application'
apply from: "$rootDir/ext-android.gradle"
apply from: "$rootDir/config/findbugs/findbugs.gradle"
apply from: "product.gradle"

apply plugin: 'cm.android.gradle'
apply plugin: 'cm.android.gradle.sign'

def getKeyStore(def propertyFile) {
    if (propertyFile == null) {
        return 'debug'
    }

    def props = new Properties();
    try {
        def signingConfig = 'release';

        def ins = new BufferedInputStream(new FileInputStream(propertyFile));
        props.load(ins);
        ins.close();
        project.android.signingConfigs {
            "$signingConfig" {
                storeFile = new File(props.getProperty('storeFile'));
                storePassword = props.getProperty('storePassword');
                keyAlias = props.getProperty('keyAlias');
                keyPassword = props.getProperty('keyPassword');
            }
        }
        return "$signingConfig";
    } catch (Exception e) {
        return 'debug';
    }
}

android {

    splits {
        abi {
            enable true
            reset()
            include('armeabi')
            universalApk false//是否打包通用版本(包含所有abi)
        }
    }

    defaultConfig {
//        jackOptions {
//            enabled true
//        }

        multiDexEnabled true
        buildConfigField('String', 'ROOT_API', '""')

        testInstrumentationRunner 'com.android.test.runner.MultiDexTestRunner'
    }

    signingConfigs {
        debug {
            storeFile file(project.storeFile)
            storePassword project.storePassword
            keyAlias project.keyAlias
            keyPassword project.keyPassword
        }
    }

    buildTypes {
        release {
            shrinkResources true
            zipAlignEnabled true

            signingConfig signingConfigs.(getKeyStore(project.jks_properties))

            minifyEnabled true
//            proguardFiles getDefaultProguardFile('proguard-android.txt'),
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'),
                    new File(project(':lib:MyUtil').getProjectDir(), 'util-proguard-rules.pro'),
                    new File(project(':lib:MyCommon').getProjectDir(), 'common-proguard-rules.pro'),
                    new File('proguard-rules.pro')
        }

        debug {
            initWith(buildTypes.release)
            debuggable true
            minifyEnabled false

            versionNameSuffix "-debug"
//            signingConfig signingConfigs.debug
            signingConfig signingConfigs.cm
        }

        rtest {
            initWith(buildTypes.release)
            debuggable true

            versionNameSuffix "-rtest"
//            signingConfig signingConfigs.debug
            signingConfig signingConfigs.cm
        }
    }

    flavorDimensions 'type_product', 'type_server', 'type_xx'
    productFlavors {
        //type_product
        gg {
            dimension 'type_product'
        }

        //type_server：平台配置
//        dev {
//            dimension 'type_server'
//        }

        online {
            dimension 'type_server'
        }

        devtest {
            dimension 'type_server'
        }

//        demo {
//            dimension "type_server"
//        }

        //type_xx：配置
        lite {
            dimension 'type_xx'
        }

        full {
            dimension 'type_xx'
        }
    }

    variantFilter { variant ->
        //online/trial:release/rtest
        //demo:rtest
        //devtest:rtest/debug

//        logger.debug('gggggggggg1 variant.getFlavors() = ' + variant.getFlavors())
        def typeServer = variant.getFlavors().get(1).name
        def buildTypeName = variant.buildType.name
        switch (typeServer) {
            case 'online':
                if ('release'.equals(buildTypeName)) {
                    variant.setIgnore(false)
                } else {
                    variant.setIgnore(true)
                }
                break
            case 'devtest':
                if ('release'.equals(buildTypeName)) {
                    variant.setIgnore(true)
                }
                break
            default:
                break
        }
    }

    applicationVariants.all { variant ->

        def productName = variant.productFlavors.get(0).name //"type_product"
        def product = project.extensions.getByName(productName)

        variant.mergedFlavor.applicationId = product.applicationId
//        variant.mergedFlavor.manifestPlaceholders = [BAIDU_LOCATION_API_KEY: product.baidu_location_api_key]

        def typeServer = variant.productFlavors.get(1).name //"type_server"

        switch (typeServer) {
            case 'dev':
                variant.buildConfigField('String', 'ROOT_API', Util.wrapStr(product.root_api_dev))
                break
            case 'devtest':
                variant.buildConfigField('String', 'ROOT_API', Util.wrapStr(product.root_api_devtest))
                break
            case 'demo':
                variant.buildConfigField('String', 'ROOT_API', Util.wrapStr(product.root_api_demo))
                break
            default:
                break
        }
    }
}

//def count1 = 0
//tasks.getByName("check") {
//    it.doLast {
//        count1 += 1
//        println("------------assemble do Last-------------")
//        println("------------count 1 = " + count1 + "-------------")
//    }
//}

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.neenbedankt.gradle.plugins:android-apt:1.8'
    }
}
apply plugin: 'com.neenbedankt.android-apt'

dependencies {
    //android.jar
    //compile files("${android.sdk}/platforms/${android.target}/android.jar")
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile project(':lib:MyCommon')
    compile project(':lib:MyFramework')

    //http
    compile 'com.squareup.retrofit2:retrofit:2.0.1'
//    compile 'com.squareup.okhttp3:okhttp:3.2.0'
    compile 'com.squareup.okhttp3:logging-interceptor:3.2.0'

    //rx
    compile 'io.reactivex:rxandroid:1.1.0'
    compile 'io.reactivex:rxjava:1.1.0'

    compile 'com.android.support:multidex:1.0.1'

//    androidTestCompile 'com.jayway.android.robotium:robotium-solo:5.4.1'
    androidTestCompile('com.android.support:multidex-instrumentation:1.0.1') {
        exclude group: 'com.android.support', module: 'multidex'
    }

    rtestCompile 'com.squareup.leakcanary:leakcanary-android:1.3.1'
    debugCompile 'com.squareup.leakcanary:leakcanary-android:1.3.1'
    releaseCompile 'com.squareup.leakcanary:leakcanary-android-no-op:1.3.1'

    compile 'com.squareup:otto:1.3.8'

    compile 'com.jakewharton:butterknife:8.0.1'
    apt 'com.jakewharton:butterknife-compiler:8.0.1'

    compile "com.android.support:design:$rootProject.supportLibraryVersion"
    compile "com.android.support:support-v13:$rootProject.supportLibraryVersion"
    compile "com.android.support:appcompat-v7:$rootProject.supportLibraryVersion"
}