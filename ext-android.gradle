def computeVersionName() {
    return project.versionName + "." + project.versionCode + "." + buildTime()
}

def computeVersion() {
    return project.versionName + "." + project.versionCode
}

def buildTime() {
    def date = new Date()
    def formattedDate = date.format('MMddHH')
    return formattedDate
}

def isWindows() {
    String osName = System.getProperty("os.name").toLowerCase();
    if (osName.indexOf("windows") >= 0) {
        return true;
    }
    return false;
}

if (plugins.hasPlugin('com.android.application') || plugins.hasPlugin('com.android.library')) {
    android {
        compileSdkVersion Integer.parseInt(project.compileSdkVersion)
        buildToolsVersion project.buildToolsVersion

        compileOptions {
            sourceCompatibility JavaVersion.VERSION_1_7
            targetCompatibility JavaVersion.VERSION_1_7
        }

        defaultConfig {
            minSdkVersion Integer.parseInt(project.minSdkVersion)
            targetSdkVersion Integer.parseInt(project.targetSdkVersion)
            versionCode Integer.parseInt(project.versionCode)
            versionName computeVersionName()
        }
    }

    android {
//        packagingOptions {
////        pickFirst 'META-INF/foo.txt'
//
//            exclude 'META-INF/DEPENDENCIES.txt'
//            exclude 'META-INF/LICENSE.txt'
//            exclude 'META-INF/NOTICE.txt'
//            exclude 'LICENSE.txt'
//            exclude 'META-INF/LICENSE'
//            exclude 'META-INF/license.txt'
//            exclude 'META-INF/NOTICE'
//            exclude 'META-INF/notice.txt'
//            exclude 'META-INF/ASL2.0'
//            exclude 'META-INF/RELEASE_NOTES.txt'
//        }

        packagingOptions.excludes = [
                '**/LICENSE.txt',
                '**/license.txt',
                '**/DEPENDENCIES.txt',
                '**/NOTICE.txt',
                '**/NOTICE',
                '**/notice.txt',
                '**/ASL2.0',
                '**/RELEASE_NOTES.txt',

                'LICENSE',
                'LICENSE.txt',
                'META-INF/LICENSE',
                'META-INF/LICENSE.txt',
                'META-INF/NOTICE',
                'META-INF/NOTICE.txt',
        ]

        lintOptions {
            abortOnError false
            quiet false
            showAll true
        }

        dexOptions {
            preDexLibraries = false
            incremental true
            javaMaxHeapSize "2g"
        }
    }
}

//if (plugins.hasPlugin('com.android.library')) {
//    android.libraryVariants.all { variant ->
//        def name = variant.buildType.name
//        def task = project.tasks.create "jar${name.capitalize()}", Jar
//        task.dependsOn variant.javaCompile
//        task.from variant.javaCompile.destinationDir
//        artifacts.add('archives', task);
//    }
//
//    task androidSourcesJar(type: Jar) {
//        classifier = 'sources'
//        from android.sourceSets.main.java.srcDirs
//    }
//
//    artifacts {
//        archives androidSourcesJar
//    }
//}

if (plugins.hasPlugin('com.android.application')) {
    android {
        //修改apk名
        applicationVariants.all { variant ->
            variant.outputs.each { output ->
                def appName = project.appName
                appName += "-"
                appName += defaultConfig.versionName
                if (variant.buildType.versionNameSuffix != null) {
                    appName += variant.buildType.versionNameSuffix
                }
                if (!'[]'.equals(String.valueOf(productFlavors.name))) {
                    appName += productFlavors.name
                }
                appName += ".apk"
                output.outputFile = new File(output.outputFile.parent, appName)
            }
        }
    }
}

def getKeyStore(def propertyFile) {
    if (propertyFile == null) {
        return 'debug'
    }

    def props = new Properties();
    try {
        def signingConfig = 'release';

        def ins = new BufferedInputStream(new FileInputStream(propertyFile));
        props.load(ins);
        ins.close();
        project.android.signingConfigs {
            "$signingConfig" {
                storeFile = new File(props.getProperty('storeFile'));
                storePassword = props.getProperty('storePassword');
                keyAlias = props.getProperty('keyAlias');
                keyPassword = props.getProperty('keyPassword');
            }
        }
        return "$signingConfig";
    } catch (Exception e) {
        return 'debug';
    }
}

//class Ext implements Plugin<Project> {
//
//    void apply(Project project) {
//        project.android.signingConfigs.release =
//                getKeyStore(project.propertyFile_release, project.storeFile_release);
//    }
//
//    def getKeyStore(def propertyFile, def storeFile) {
//        if (releaseStoreFile == null || releaseStoreFile == "") {
//            return 'debug'
//        }
//
//        def props = new Properties();
//        try {
//            def signingConfig = 'release';
//
//            def ins = new BufferedInputStream(new FileInputStream(releasePropertyFile));
//            props.load(ins);
//            ins.close();
//            project.android.signingConfigs {
//                "$signingConfig" {
//                    storeFile = new File(releaseStoreFile);
//                    storePassword = props.getProperty('storePassword');
//                    keyAlias = props.getProperty('keyAlias');
//                    keyPassword = props.getProperty('keyPassword');
////                System.out.println(props.getProperty('storeFile') + '   ');
//                }
//            }
//            return "$signingConfig";
//        } catch (Exception e) {
//            return 'debug';
//        }
//    }
//}