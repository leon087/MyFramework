apply plugin: 'maven-publish'
apply plugin: 'signing'

def getReleaseRepositoryUrl() {
    return hasProperty('RELEASE_REPOSITORY_URL') ? RELEASE_REPOSITORY_URL
            : "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
}

def getSnapshotRepositoryUrl() {
    return hasProperty('SANPSHOT_REPOSITORY_URL') ? SANPSHOT_REPOSITORY_URL
            : "https://oss.sonatype.org/content/repositories/snapshots/"
}

def getRepositoryUsername() {
    return hasProperty('NEXUS_USERNAME') ? NEXUS_USERNAME : ""
}

def getRepositoryPassword() {
    return hasProperty('NEXUS_PASSWORD') ? NEXUS_PASSWORD : ""
}

def computeVersion(String versionName, String versionCode) {
    return versionName + "." + versionCode
}

def getCanPackageDependencies() {
    def dep_names = hasProperty('PACKAGE_DEPENDENCIES_NAMES') ? "$PACKAGE_DEPENDENCIES_NAMES".split(',') : []
    project.android.libraryVariants.toList().first().javaCompile.classpath.files.findAll { file ->
        dep_names.find {
            file.absolutePath.contains(it)
        }
    }.collect {
        zipTree(it)
    }
}
//
//android.libraryVariants.all { variant ->
//    def name = variant.buildType.name
//    def task = project.tasks.create "jar${name.capitalize()}", Jar
//    task.dependsOn variant.javaCompile
//    task.from variant.javaCompile.destinationDir
//    task.exclude("**/R.class")
//    task.exclude("**/R\$**.class")
//    artifacts.add('archives', task);
//}

//signing {
//    required { isReleaseBuild() && gradle.taskGraph.hasTask("publishing") }
//    sign configurations.archives
//}

//task androidJavadocs(type: Javadoc) {
//    source = android.sourceSets.main.java.srcDirs
//    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
//}
task androidSourcesJar(type: Jar) {
    classifier = 'sources'
    from android.sourceSets.main.java.srcDirs
}

def pomConfig = {
    organization {
        name POM_ORGANIZATION_NAME
        url POM_ORGANIZATION_URL
    }
    issueManagement {
        system POM_ISSUEMANAGEMENT_SYSTEM
        url POM_ISSUEMANAGEMENT_URL
    }
    scm {
        url POM_SCM_URL
        connection POM_SCM_CONNECTION
        developerConnection POM_SCM_DEV_CONNECTION
    }

    licenses {
        license {
            name POM_LICENCE_NAME
            url POM_LICENCE_URL
            distribution POM_LICENCE_DIST
        }
    }

    developers {
        developer {
            id POM_DEVELOPER_ID
            name POM_DEVELOPER_NAME
            organization POM_DEVELOPER_ORIGANIZATION
            organizationUrl POM_DEVELOPER_ORIGANIZATIONURL
        }
    }
}
publishing {
    repositories {
        maven {
            credentials {
                username getRepositoryUsername()
                password getRepositoryPassword()
            }
            name 'Repository-Remote-Release'
            url RELEASE_REPOSITORY_URL
        }
        maven {
            credentials {
                username getRepositoryUsername()
                password getRepositoryPassword()
            }
            name 'Repository-Remote-Snapshot'
            url SANPSHOT_REPOSITORY_URL
        }

        //以下是自己测试的私有Maven仓库，可忽略
        maven {
            credentials {
                username PRIVATE_NEXUS_USERNAME
                password PRIVATE_NEXUS_PASSWORD
            }
            name 'Repository-Remote-Private-Release'
            url PRIVATE_RELEASE_REPOSITORY_URL

        }
        maven {
            credentials {
                username PRIVATE_NEXUS_USERNAME
                password PRIVATE_NEXUS_PASSWORD
            }
            name 'Repository-Remote-Private-Snapshot'

            url PRIVATE_SANPSHOT_REPOSITORY_URL
        }

    }
    publications {
//        java(MavenPublication) {
//            from components.java
//            artifactId = POM_ARTIFACT_ID
//            groupId = GROUP
//            pom.withXml {
//                pom.withXml {
////                asNode().children().last() + pomConfig
//                    def depNodes = asNode().appendNode('dependencies')
//                    project.configurations.collectMany { it.allDependencies }.toSet().findAll {
//                        it instanceof ProjectDependency || it instanceof ExternalModuleDependency
//                    }.each { dep ->
//                        def depNode = depNodes.appendNode('dependency')
//                        depNode.appendNode('groupId', dep.getGroup())
//                        depNode.appendNode('artifactId', dep.getName())
//                        depNode.appendNode('version', dep.getVersion())
//                    }
//                }
//            }
//        }

        // Create different publications for every build types (debug and release)
        android.libraryVariants.all { variant ->
            "${variant.name}"(MavenPublication) {
                //Create aar or jar
                if (("aar").equals(POM_PACKAGING)) {
                    artifact bundleRelease
                } else if (("jar").equals(POM_PACKAGING)) {
                    def name = variant.buildType.name
                    def task = project.tasks.create "jar${name.capitalize()}", Jar
                    task.dependsOn variant.javaCompile
                    task.from variant.javaCompile.destinationDir
                    task.exclude("**/R.class")
                    task.exclude("**/R\$**.class")
                    artifact task
                }
                artifact androidSourcesJar

                if ("${variant.name}".equalsIgnoreCase("debug")) {
                    publications."${variant.name}".version = project.version + "-SNAPSHOT"

                } else {
                    publications."${variant.name}".version = project.version
                }
                artifactId = POM_ARTIFACT_ID
                groupId = GROUP

                pom.withXml {
                    //Creating additional node for dependencies
                    def dependenciesNode = asNode().appendNode('dependencies')

                    //Defining configuration names from which dependencies will be taken (debugCompile or releaseCompile and compile)
                    def configurationNames = ["${variant.name}Compile", 'compile']

                    configurationNames.each { configurationName ->
                        this.configurations[configurationName].allDependencies.each {
                            if (it.group != null && it.name != null) {
                                def dependencyNode = dependenciesNode.appendNode('dependency')
                                dependencyNode.appendNode('groupId', it.group)
                                dependencyNode.appendNode('artifactId', it.name)
                                dependencyNode.appendNode('version', it.version)

                                //If there are any exclusions in dependency
                                if (it.excludeRules.size() > 0) {
                                    def exclusionsNode = dependencyNode.appendNode('exclusions')
                                    it.excludeRules.each { rule ->
                                        def exclusionNode = exclusionsNode.appendNode('exclusion')
                                        exclusionNode.appendNode('groupId', rule.group)
                                        exclusionNode.appendNode('artifactId', rule.module)
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }


    }
}

/**
 * publish包括以下命令：
 * generatePomFileForDebugPublication - Generates the Maven POM file for publication 'debug'.
 * generatePomFileForReleasePublication - Generates the Maven POM file for publication 'release'.
 * publishDebugPublicationToMavenLocal - Publishes Maven publication 'debug' to the local Maven repository.
 * publishDebugPublicationToRepository-Remote-Private-ReleaseRepository - Publishes Maven publication 'debug' to Maven repository 'Repository-Remote-Private-Release'.
 * publishDebugPublicationToRepository-Remote-Private-SnapshotRepository - Publishes Maven publication 'debug' to Maven repository 'Repository-Remote-Private-Snapshot'.
 * publishDebugPublicationToRepository-Remote-ReleaseRepository - Publishes Maven publication 'debug' to Maven repository 'Repository-Remote-Release'.
 * publishDebugPublicationToRepository-Remote-SnapshotRepository - Publishes Maven publication 'debug' to Maven repository 'Repository-Remote-Snapshot'.
 * publishReleasePublicationToMavenLocal - Publishes Maven publication 'release' to the local Maven repository.
 * publishReleasePublicationToRepository-Remote-Private-ReleaseRepository - Publishes Maven publication 'release' to Maven repository 'Repository-Remote-Private-Release'.
 * publishReleasePublicationToRepository-Remote-Private-SnapshotRepository - Publishes Maven publication 'release' to Maven repository 'Repository-Remote-Private-Snapshot'.
 * publishReleasePublicationToRepository-Remote-ReleaseRepository - Publishes Maven publication 'release' to Maven repository 'Repository-Remote-Release'.
 * publishReleasePublicationToRepository-Remote-SnapshotRepository - Publishes Maven publication 'release' to Maven repository 'Repository-Remote-Snapshot'.
 * publishToMavenLocal - Publishes all Maven publications produced by this project to the local Maven cache.
 */

//java
//task publishJavaToRelease(dependsOn: [
//        'generatePomFileForJavaPublication',
//        'publishJavaPublicationToRepository-Remote-ReleaseRepository'
//])

task publishRelease(dependsOn: [
        'generatePomFileForReleasePublication',
        'publishReleasePublicationToRepository-Remote-ReleaseRepository'
])
task publishDebug(dependsOn: [
        'generatePomFileForDebugPublication',
        'publishDebugPublicationToRepository-Remote-SnapshotRepository'
])
task publish(overwrite: true, dependsOn: [
        'publishRelease',
        'publishDebug'
])

//以下用于自己的Maven测试，可忽略
task publishReleaseToPrivate(dependsOn: [
        'generatePomFileForReleasePublication',
        'publishReleasePublicationToRepository-Remote-Private-ReleaseRepository',
])

task publishDebugToPrivate(dependsOn: [
        'generatePomFileForDebugPublication',
        'publishDebugPublicationToRepository-Remote-Private-SnapshotRepository'
])

task publishToPrivate(dependsOn: [
        'publishReleaseToPrivate',
        'publishDebugToPrivate'
])

/**
 *
 * 执行gradle publish命令时,默认执行以下task,忽略其他task
 * publishDebugPublicationToRepository-Remote-SnapshotRepository
 * publishReleasePublicationToRepository-Remote-ReleaseRepository
 *
 */
gradle.taskGraph.whenReady { taskGraph ->
    def tasks = taskGraph.getAllTasks()
    if (tasks.find { ("publish").equals(it.name) }) {
        tasks.findAll {
            ("publishReleasePublicationToRepository-Remote-Private-ReleaseRepository").equals(it.name) ||
                    ("publishDebugPublicationToRepository-Remote-Private-SnapshotRepository").equals(it.name) ||
                    ("publishDebugPublicationToRepository-Remote-Private-ReleaseRepository").equals(it.name) ||
                    ("publishReleasePublicationToRepository-Remote-Private-SnapshotRepository").equals(it.name) ||
                    ("publishDebugPublicationToRepository-Remote-ReleaseRepository").equals(it.name) ||
                    ("publishReleasePublicationToRepository-Remote-SnapshotRepository").equals(it.name)
        }.each { task ->
            task.enabled = false
            task.group = null
            return false
        }
    }
}
//afterEvaluate {
//    tasks.withType(PublishToMavenRepository).all { publishTask ->
//        publishTask.onlyIf { task ->
//            if (("publishReleasePublicationToRepository-Remote-Private-SnapshotRepository").equals(task.name) ||
////                    ("publishDebugPublicationToRepository-Remote-Private-ReleaseRepository").equals(task.name) ||
//                    ("publishDebugPublicationToRepository-Remote-ReleaseRepository").equals(task.name) ||
//                    ("publishReleasePublicationToRepository-Remote-SnapshotRepository").equals(task.name)) {
//                task.enabled = false
//                task.group = null
//                return false
//            }
//            return true
//        }
//    }
//}

